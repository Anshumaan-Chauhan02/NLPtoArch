package main;
import java.lang.*;
import java.util.StringTokenizer;
import lib.TextToAADLParser;
import lib.TextToAADLVisitor;
import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;

public class Visitor<Object> extends AbstractParseTreeVisitor<Object> implements TextToAADLVisitor<Object>{

    String[] system_names =new String[20];
    String[] created_systems =new String[20];
    int index_track=0;
    /**
     * Visit a parse tree produced by {@link TextToAADLParser#nlparch}.
     *
     * @param ctx the parse tree
     * @return the visitor result
     */
    @Override
    public Object visitNlparch(TextToAADLParser.NlparchContext ctx) {
        return visitChildren(ctx);
    }

    /**
     * Visit a parse tree produced by {@link TextToAADLParser#sentences}.
     *
     * @param ctx the parse tree
     * @return the visitor result
     */
    @Override
    public Object visitSentences(TextToAADLParser.SentencesContext ctx) {

        return visitChildren(ctx);
    }

    /**
     * Visit a parse tree produced by {@link TextToAADLParser#sentence}.
     *
     * @param ctx the parse tree
     * @return the visitor result
     */
    @Override
    public Object visitSentence(TextToAADLParser.SentenceContext ctx) {

        return visitChildren(ctx);
    }

    /**
     * Visit a parse tree produced by {@link TextToAADLParser#structural_stmt}.
     *
     * @param ctx the parse tree
     * @return the visitor result
     */
    @Override
    public Object visitStructural_stmt(TextToAADLParser.Structural_stmtContext ctx) {
        String ctx_construction=ctx.toString();
        int index=0;
        boolean var=false;
        StringTokenizer st = new StringTokenizer(ctx_construction,", ");
        while (st.hasMoreTokens())
        {
            String token_name=st.nextToken();
            if(token_name.equals("consists"))
            {
                continue;
            }
            else
            {
                for(int i=0;i<=system_names.length-1;i++) {

                    if(token_name.equals(system_names[i]))
                    {
                        var=true;
                    }

                }
                if(var==false)
                {
                    system_names[index]=token_name;
                    index=index+1;
                }

            }

        }
        for(int i=index_track;i<=system_names.length-1;i++)
        {
            String x[]=new String[2];
            x=system_generate(system_names[i]);
            index_track++;
        }
        //call system_generate() for all the systems () will return system declaration and implementation declaration, use both created system and system generation
        //call subcomponent_generate() for all the systems ()
        return null;
    }

    public String subcomponents_generation(String[] args)
    {
        String ret_subcomponent="subcomponents\n ";
        for(int i=0;i<=args.length-1;i++) {
            ret_subcomponent = ret_subcomponent +"\n"+"this_"+args[i]+": system "+args[i]+";"+"\n";
        }
        return ret_subcomponent;
    }

    public String[] system_generate(String sys_name) {
        String system_start="system "+sys_name+"\n";
        String system_end="end "+sys_name+";"+"\n";
        String system_imp_start= system_start+".work"+"\n";
        String system_imp_end="end "+sys_name+".work;"+"\n";
        String[] sys_return =new String[2];
        sys_return[0]=system_start+system_end;
        sys_return[1]=system_imp_start+system_imp_end;
        return sys_return;
    }

    /**
     * Visit a parse tree produced by {@link TextToAADLParser#functional_stmts}.
     *
     * @param ctx the parse tree
     * @return the visitor result
     */
    @Override
    public Object visitFunctional_stmts(TextToAADLParser.Functional_stmtsContext ctx) {

        visitChildren(ctx);
        return null;
    }

    /**
     * Visit a parse tree produced by {@link TextToAADLParser#functional_stmt}.
     *
     * @param ctx the parse tree
     * @return the visitor result
     */
    @Override
    public Object visitFunctional_stmt(TextToAADLParser.Functional_stmtContext ctx) {

        visitChildren(ctx);
        return null;
    }

    /**
     * Visit a parse tree produced by {@link TextToAADLParser#energizing_stmt}.
     *
     * @param ctx the parse tree
     * @return the visitor result
     */
    @Override
    public Object visitEnergizing_stmt(TextToAADLParser.Energizing_stmtContext ctx) {

        visitChildren(ctx);
        return null;
    }
}
