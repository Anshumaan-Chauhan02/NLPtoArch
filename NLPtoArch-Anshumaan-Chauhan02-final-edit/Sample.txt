package main;

import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.Iterator;
import java.util.StringTokenizer;

public class temp {
    //        System.out.println(ctx.getText());
//        System.out.println(ctx.multi_flow().getsText());
//        System.out.println(ctx.FUNC_VERB());
//        if(ctx.flow()!=null)
//        {
//            System.out.println("Flow in stmt="+ctx.flow().getText());
//        }
    String ctx_construction=ctx.getText();
    StringTokenizer st = new StringTokenizer(ctx_construction);
    int token_number=0;
        while(st.hasMoreTokens()) {
        String token_name = st.nextToken();
        boolean check_uppercase=false;
        for(int j=0;j<=token_name.length()-1;j++)
        {
            char d = token_name.charAt(j);
            if(!((Character.isUpperCase(d)) || (token_name.charAt(j)=='_')))
            {
                check_uppercase=true;
            }
        }
        if (!check_uppercase) {
            String newString = "";
            boolean var = false;
            int index_true = 0;
            for (int i = 0; i <= index - 1; i++) {
                if (token_name.equals(system_names[i])) {
                    var = true;
                    index_true = i;
                }
            }
            if (var) {
                boolean already_features = false;
                boolean newline_var = false;
                for (int i = 0; i <= index_true - 1; i++) {
                    if (token_name.equals(sys_features[i])) {
                        already_features = true;
                    }
                }
                if (!already_features) {
                    String multiple_flows=ctx.multi_flow().getText();
//                        System.out.println(multiple_flows);
                    StringTokenizer sc=new StringTokenizer(multiple_flows);
                    int num_of_flows=0;
                    while(sc.hasMoreTokens())
                    {
                        sc.nextToken();
                        num_of_flows+=1;
                    }
                    for (int l = 0; l <= system_declaration[index_true][0].length() - 1; l++) {
                        if ((system_declaration[index_true][0].charAt(l) == '\n') && (!newline_var)) {
                            newString = newString + "\n\tfeatures\n";
                            boolean check_mul_loop=false;
                            Iterator<TerminalNode> verbs_used=ctx.FUNC_VERB().iterator();
                            while(verbs_used.hasNext())
                            { String current_verb=verbs_used.next().toString();

                                if((current_verb.equals("receives"))||(current_verb.equals("imports")))
                                {   if(!check_mul_loop) {
                                    for (int p = 0; p <= num_of_flows - 1; p++) {
                                        newString = newString + "\t\t : in data port;\n";
                                        check_mul_loop = true;
                                    }
                                }
                                }
                                if((current_verb.equals("transfers"))||(current_verb.equals("distributes")))
                                {   if(!check_mul_loop) {
                                    for (int p = 0; p <= num_of_flows - 1; p++) {
                                        newString = newString + "\t\t : out data port;\n";
                                        check_mul_loop = true;
                                    }
                                }
                                }
                            }
                            sys_features[index_features] = system_names[index_true];
                            index_features = index_features + 1;
                            newline_var = true;
                        } else {
                            newString = newString + system_declaration[index_true][0].charAt(l);
                        }
                    }
                    system_declaration[index_true][0] = newString;
                }
                token_number = token_number + 1;
            }
        }
    }
}
